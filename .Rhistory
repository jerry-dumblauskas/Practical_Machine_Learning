source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
y <- matrix(nrow=2,ncol=2)
y
r<-4
r[2]<-5
r
r[9]<-5
r
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
y<-[1:6]
y<-1:6
y
y<-matrix(y)
y
y<-matrix(y,2)
y
y<-matrix(y,3)
y
z<-1:6
y<-matrix(z,3)
y
y[c(1,3),]
?apply
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
m
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
which.max(z)
z
?cbind
z
cbind(z,1)
cbind(z,11)
qq<-cbind(z,11)
qq
qq<-cbind(z,c(1,11)
)
qq
qq<-cbind(z,c(1,11,22))
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
class(z)
z
class(m)
m
q<-array(3,2,3)
q
class(q)
attributes(q)
q<-array(,dim = c(3,2,3))
q
q<-array(,dim = c(3,2,3,4))
q
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
j <- list(name="Joe", salary=55000, union=T)
j
j[1]
attributes(j)
attributes(j)
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
class(qwerty)
qwerty
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
Lst
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
Lst
r<-Lst[5]
class(r)
Lst[[5]]
Lst[[[5]]
Lst[[[5]][1]
Lst[[[5]]]
Lst[[5]][1]
class(Lst[[5]][1])
class(Lst[[5]])
Lst
class(Lst[[5]])
Lst[[5]]
Lst[[5]][1]
r<-Lst[5]
j <- list(name="Joe", salary=55000, union=T)
Lst[5]<-j
Lst[[5]]<-j
Lst
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
Lst
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
j <- list(name="Joe", salary=55000, union=T)
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
Lst
Lst[5]
Lst[[5]]
class(Lst[[5]])
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
dir
dir()
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
%a2b%(3,5)
source('~/GITHUB_WORK/R_WORK/art_of_r_programming_script.R')
x<-c(-.5,0,1,1,1.5)
y<-c(0,0,2,0,0)
plot(x,y, lwd=3, frame=FALSE, type="l")
pbeta(.75,2,1)
qbeta()
galton
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
swirl()
d
1
10/36
info()
.916
33/36
deck
52
4/52
0
12/52
3/51
2/51
.8*1.6/2
46
46/100
64/100
mypdf
mypdf(1.6)
integrate(mypdf,0,1.6)
.25/4
2
sqrt(2)
.001*99.7
.001*99.7/100
1-.001*99.7/100
.999*.3/100
info()
skip()
skip()
3.5
expect_dice()
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
(edh+edl)/2
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
state.abb
list(state.abb)
swirl()
library(swirl)
swirl()
dice_sqr
ex2_fair<-dice_sqr*pdf
ex2_fair<-dice_sqr*dice_fair
ex2_fair<-sum(dice_sqr*dice_fair)
ex2_fair-square(3.5)
ex2_fair-(3.5*3.5)
ex2_fair-3.5^2
sum(dice_sqr*dice_high)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean)).
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
4
hoose(5,x)*(.8)^x*(.2)^(5-x)
choose(5,x)*(.8)^x*(.2)^(5-x)
choose(5,3)*(.8)^3*(.2)^(5-3)+choose(5,4)*(.8)^4*(.2)^(5-4)+choose(5,5)*(.8)^5*(.2)^(5-5)
pbinom(size = 5, prob = .8, lower.tail = FALSE)
pbinom(size = 5, prob = .8, lower.tail = FALSE, q=2)
qnorm(10)
qnorm(.1)
qnorm(.5)
qnorm(.975, mean = 3, sd=2)
1.96*3*2
1.96*2+3
play()
?qnorm
nxt()
pnorm(1200, mean = 1020, sd=50)
pnorm(1200, mean = 1020, sd=50, lower.tail = FALSE)
33
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm((.75, mean=1200, sd=50)
qnorm(.75, mean=1200, sd=50)
qnorm(.75, mean=1020, sd=50)
pnorm(qnorm(.53))
.53
ppois(q=3, mean(10))
ppois(3, mean(10))
ppois(3, 10)
ppois(3, 2.5*4)
pbinom(5,1000,.01)
ppois(5, 1000*.01)
coinPlot(10)
coinPlot(10000)
qnorm(.95)
info()
skip()
skip()
skip()
ACCompar(20)
skip()
skip()
skip()
data("ChickWeight")
ChickWeight
data("mtcars")
mtcars
qt(.975,15)
qt(.025,15)
data(father.son)
library(usingR)
install.packages("u"UsingR"")
library(UsingR)
install.packages(UsingR)
install.packages("UsingR")
library(UsingR)
data("father.son")
head(father.son)
t.test(father.son$fheight, father.son$sheight)
t.test(father.son$fheight, father.son$sheight, paired = TRUE)
t.test(father.son$fheight - father.son$sheight)
t.test(father.son$sheight, father.son$fheight)
t.test(father.son$sheight, father.son$fheight, paired = TRUE)
t.test(father.son$sheight, father.son$fheight)
t.test(father.son$sheight - father.son$fheight)
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
install.packages("dplyr")
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
wideCW
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
t.test(gain ~ Diet, paired = FALSE,
var.equal = TRUE, data = wideCW14)
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference<-g2-g1
mean(difference)
s<-sd(difference)
mn + c(-1,1)*s/sqrt(10)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
x$conf.int
f
sjip()
skip()
sp<-(131.86*15.34)^2+(126.44*18.23)^2
sp <- 7*15.34^2 + 20*18.23^2
ns<-28
ns<-27
sp<-sp/ns^.5
sp<-sqrt(sp/ns)
mn + c(-1,1)*qt(.975,27)*s/sqrt(29)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
var(g1,g2)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
sp*sqrt(2/10)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1, paired = FALSE, var.equal = TRUE)$x$conf
t.test(g2,g1, paired = FALSE, var.equal = TRUE)$conf
t.test(g2,g1, paired = TRUE)$conf
num<-(15.34^2/8 + 18.23^2/21)^2
den<-(15.34^2/8)^2/7 + (18.23^2/21)^2/21
den<-(15.34^2/8)^2/7 + (18.23^2/21)^2/20
mydf<num/den
mydf<-num/den
md + c(-1,1)*qt(.975,mydf)*sp*sqrt(1/5)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
32
10/sqrt(32)
s/sqrt(n)
s/sqrt(32)
s/sqrt(100)
10/sqrt(32)
skip()
34
2/1
2/2.5
15
qt(.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
mu0=30
mua=32
mu0=30
mua=32
sigma = 4
n<-16
z,-qnorm(1-alpha)
z<-qnorm(1-alpha)
alpha = .05
z<-qnorm(1-alpha)
pnorm(mu0 + z*sigma/sqrt(n), mean = mu0, sd = sigma/sqrt(n), lower.tail=FALSE)
pnorm(mu0 + z*sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail=FALSE)
pnorm(mu0 + z*sigma/sqrt(n), mean = 60, sd = sigma/sqrt(n), lower.tail=FALSE)
?pnorm
power.t.test(power = 0.8, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = 0.8, n = 27, sd = 200, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = 0.8, n = 26, sd = 200, type = "one.sample", alt = "one.sided")$delta
swirl()
library(swirl)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z<-qnorm(.95)
z<-pnorm(q=30+z, mean=30, lower.tail = FALSE)
z<-pnorm(30+z, mean=30, lower.tail = FALSE)
pnorm(30+z, mean=30, lower.tail = FALSE)
pnorm(30+z, mean=32, lower.tail = FALSE)
pnorm(30+z, mean=32, sd=1,lower.tail = FALSE)
pnorm(30+z, mean=32, sd=2,lower.tail = FALSE)
pnorm(30+z*2, mean=32, sd=2,lower.tail = FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(n=26, power = .8, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(n=27, power = .8, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
sum(pValues < .05)
p.adjust(pValues, method = sum)
p.adjust(pValues, method="bonferroni")
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
table(pValues2<.05, trueStatus)
24/500
table(psum(p.adjust(pValues,method="bonferroni") < 0.05), trueStatus)
table(sum(p.adjust(pValues,method="bonferroni") < 0.05), trueStatus)
skip()
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
1/6
sum(1:6)/6
print(g2)
head(sh)
head(nh)
nh
median(resampledMedians)
median(sh)
sam<-sample(fh,nh*B,replace(TRUE))
sam<-sample(fh,nh*B,replace=TRUE)
resam<-matrix(sam,B,nh)
apply
meds <- apply(resam,1,median)
skip()
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(.025,.975))
quantile(meds, c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range( Bdata$count)
range( Cdata$count)
BCounts
BCcounts
group
testStat
obs<-testStat(BCcounts, group)
obs
mean( Bdata$count-Cdata$count)
sample(group)
perms <- sapply(1 : 10000,
| function(i) testStat(BCcounts, sample(group)))
skip()
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts,|sample(group)))
perms <- sapply(1 : 10000, function(i) testStat(DEcounts,sample(group)))
install.packages('caret')
installed.packages()
install.packages('caret')
installed.packages()
source('~/.active-rstudio-document')
install.packages('kernlab')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
args(trainControl)
source('~/GITHUB_WORK/R_WORK/junk.R')
source('~/GITHUB_WORK/R_WORK/junk.R')
source('~/GITHUB_WORK/R_WORK/junk.R')
head(trainFaith)
source('~/GITHUB_WORK/R_WORK/junk.R')
head(trainFaith)
source('~/GITHUB_WORK/R_WORK/junk.R')
head(trainFaith)
source('~/GITHUB_WORK/R_WORK/junk.R')
lm1
summary(lm1)
library(ISLR)
install.packages('ISLR')
library(ggplot2)
library(caret)
data(Wage)
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
Wage <- subset(Wage, select=c(logwage))
summary(Wage)
summary(Wage)
Wage <- subset(Wage, select=-c(logwage))
summary(Wage)
summary(Wage)
source('~/GITHUB_WORK/R_WORK/junk1.R')
library(ISLR)
summary(Wage)
qplot(age,wage,data=training)
source('~/GITHUB_WORK/R_WORK/junk1.R')
source('~/GITHUB_WORK/R_WORK/junk1.R')
source('~/GITHUB_WORK/R_WORK/junk1.R')
qplot(age,wage,data=training)
source('~/GITHUB_WORK/R_WORK/junk2.R')
install.packages('AppliedPredictiveModeling')
source('~/GITHUB_WORK/R_WORK/junk2.R')
source('~/GITHUB_WORK/R_WORK/junk2.R')
source('~/GITHUB_WORK/R_WORK/junk2.R')
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
source('~/GITHUB_WORK/R_WORK/junk3.R')
source('~/GITHUB_WORK/R_WORK/junk3.R')
source('~/GITHUB_WORK/R_WORK/junk3.R')
qplot(age,wage,data=training)
data(concrete)
source('~/GITHUB_WORK/R_WORK/junk3.R')
source('~/.active-rstudio-document')
qplot(training,,data=training)
hist(testing)
hist(testing$Superplasticizer)
range(testing$Superplasticizer)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
preProc$rotation
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/GITHUB_WORK/R_WORK/junk1.R')
source('~/GITHUB_WORK/R_WORK/junk4.R')
source('~/.active-rstudio-document')print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="class tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
print(modFit$finalModel)
source('~/GITHUB_WORK/R_WORK/junk4.R')
install.packages('rattle')
install.packages('rattle')
install.packages("RGtk2", dependencies = T, type = 'mac.binary.mavericks')
install.packages('rattle')
install.packages('rattle')
library(rattle)
library(rattle)
library(rattle)
library(rattle)
uninstall.packages("RGtk2", dependencies = T, type = 'mac.binary.mavericks')
remove.packages("RGtk2", dependencies = T, type = 'mac.binary.mavericks')
remove.packages("RGtk2")
library(rattle)
remove.packages("rattle")
setwd("~/GITHUB_WORK/Practical_Machine_Learning")
